{"version":3,"sources":["images/active.png","images/cured.png","images/death.png","images/infected.png","images/newcases.png","images/hospitalized.png","images/newdeath.png","modules/statistics/service.js","modules/statistics/components/statisticCard.js","modules/statistics/components/hospitalizedCard.js","core/enums/pageType.js","modules/statistics/components/currentStatistics.js","modules/statistics/view/statisticPage.js","modules/statistics/routes.js","app/layout/components/navBar.js","app/layout/components/bottomNavBar.js","app/layout/layout.js","app/routes.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","getStatistics","axios","get","then","data","StatisticCard","props","Card","raised","className","style","height","width","padding","src","icon","CardContent","title","color","end","value","HospitalizedCard","classes","makeStyles","theme","root","display","details","flexDirection","textAlign","content","flex","cover","verticalAlign","justifyContent","alignItems","useStyles","useTheme","Typography","variant","item","nameE","nameS","nameT","component","treatmentTotal","PageType","Object","freeze","Local","Global","HospitalDetails","CurrentStatistics","useState","lastUpdated","moment","local","global","hospitalData","currentStatistics","setcurrentStatistics","toSnakeCase","string","replace","x","y","toLowerCase","mapHospitalizedData","map","id","hospital","name","name_si","name_ta","treatmentLocal","treatment_local","treatmentForeign","treatment_foreign","treatment_total","useEffect","service","update_date_time","infected","local_total_cases","active","local_active_cases","hospitalized","local_total_number_of_individuals_in_hospitals","cured","local_recovered","newcase","local_new_cases","death","local_deaths","global_total_cases","global_deaths","global_recovered","global_new_cases","newdeath","global_new_deaths","hospital_data","console","log","marginLeft","fromNow","Grid","container","xs","sm","lg","xl","pageType","key","getRelatedPage","StatisticPage","StatisticRoute","match","exact","path","render","NavBar","AppBar","position","backgroundColor","Toolbar","textShadow","align","BottomNavBar","BottomNavigation","showLabels","BottomNavigationAction","label","Room","onClick","onChange","Public","HomeWork","Layout","children","AppRoutes","setPageType","bind","left","right","marginTop","marginBottom","App","darkTheme","createMuiTheme","palette","type","primary","light","main","dark","contrastText","secondary","ThemeProvider","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac9f7c06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/active.473b14dc.png\";","module.exports = __webpack_public_path__ + \"static/media/cured.500bea00.png\";","module.exports = __webpack_public_path__ + \"static/media/death.9dd59e7c.png\";","module.exports = __webpack_public_path__ + \"static/media/infected.572c50c6.png\";","module.exports = __webpack_public_path__ + \"static/media/newcases.24b3962f.png\";","module.exports = __webpack_public_path__ + \"static/media/hospitalized.3111c8aa.png\";","module.exports = __webpack_public_path__ + \"static/media/newdeath.70278438.png\";","import axios from 'axios';\r\n\r\nexport default {\r\n    getStatistics\r\n}\r\n\r\nfunction getStatistics() {\r\n    return axios.get(`https://hpb.health.gov.lk/api/get-current-statistical`).then((data) => data.data.data);\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Card, CardContent, CardMedia } from '@material-ui/core';\r\nimport CountUp  from 'react-countup';\r\n\r\nconst StatisticCard = props => {\r\n    return (\r\n        <div>\r\n            <Card raised={true}>\r\n                <div className=\"text-center\">\r\n                    <img style={{ height: '50%' , width:'50%', padding: '10%' }} src={props.icon} />\r\n                </div>\r\n                <CardContent className='text-center'>\r\n                    <h6>{props.title}</h6>\r\n                    <h4 style={{ color: props.color }}><CountUp end={props.value} /></h4>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nStatisticCard.propTypes = {\r\n    icon: PropTypes.any,\r\n    title: PropTypes.any,\r\n    value: PropTypes.any,\r\n    color: PropTypes.any,\r\n}\r\n\r\nexport default StatisticCard\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nconst HospitalizedCard = props => {\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        details: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            width:'75%',\r\n            textAlign:'left'\r\n\r\n        },\r\n        content: {\r\n            flex: '1 0 auto',\r\n        },\r\n        cover: {\r\n            width: '25%',\r\n            textAlign: 'center',\r\n            verticalAlign: 'middle',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    return (\r\n        <div>\r\n            <Card className={classes.root}>\r\n                <div className={classes.details}>\r\n                    <CardContent className={classes.content}>\r\n                        <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                            {props.item.nameE}\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                            {props.item.nameS}\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                            {props.item.nameT}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </div>\r\n                <CardContent className={classes.cover} >\r\n                    <Typography component=\"h5\" variant=\"h5\">\r\n                        {<CountUp end={props.item.treatmentTotal} />}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nHospitalizedCard.propTypes = {\r\n    item: PropTypes.any,\r\n}\r\n\r\nexport default HospitalizedCard\r\n","var PageTypeEnums = {\r\n    Local: 0,\r\n    Global: 1,\r\n    HospitalDetails: 2,\r\n};\r\n\r\nexport const PageType = Object.freeze(PageTypeEnums);","import React, { useState, useEffect,Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport service from '../service';\r\nimport moment from 'moment'\r\nimport StatisticCard from './statisticCard';\r\nimport HospitalizedCard from './hospitalizedCard';\r\nimport { PageType } from '../../../core/enums/pageType';\r\nimport { Grid } from '@material-ui/core';\r\nimport active from '../../../images/active.png';\r\nimport cured from '../../../images/cured.png';\r\nimport death from '../../../images/death.png';\r\nimport infected from '../../../images/infected.png';\r\nimport hospitalized from '../../../images/hospitalized.png';\r\nimport newcase from '../../../images/newcases.png';\r\nimport newdeath from '../../../images/newdeath.png';\r\n\r\nexport const CurrentStatistics = props => {\r\n\r\n    const [currentStatistics, setcurrentStatistics] = useState({\r\n        lastUpdated: moment(),\r\n        local: [],\r\n        global: [],\r\n        hospitalData: []\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    function toSnakeCase(string) {\r\n        return string.replace(/(?:^|\\.?)([A-Z])/g, function (x, y) { return \"_\" + y.toLowerCase() }).replace(/^_/, \"\");\r\n    }\r\n\r\n\r\n\r\n    function fetchData() {\r\n        return service.getStatistics().then(data => {\r\n            setcurrentStatistics({\r\n                lastUpdated: data.update_date_time,\r\n                local: [\r\n                    {\r\n                        icon: infected,\r\n                        title: 'Infected',\r\n                        value: data.local_total_cases,\r\n                        color: '#1CA0F2'\r\n                    },\r\n                    {\r\n                        icon: active,\r\n                        title: 'Active',\r\n                        value: data.local_active_cases,\r\n                        color: '#FFAA21'\r\n                    },\r\n                    {\r\n                        icon: hospitalized,\r\n                        title: 'Hospitalized',\r\n                        value: data.local_total_number_of_individuals_in_hospitals,\r\n                        color: '#F35D22'\r\n                    },\r\n                    {\r\n                        icon: cured,\r\n                        title: 'Recovered',\r\n                        value: data.local_recovered,\r\n                        color: '#1EBC64'\r\n                    },\r\n                    {\r\n                        icon: newcase,\r\n                        title: 'New Cases',\r\n                        value: data.local_new_cases,\r\n                        color: '#BB86FC'\r\n                    },\r\n                    {\r\n                        icon: death,\r\n                        title: 'Deaths',\r\n                        value: data.local_deaths,\r\n                        color: '#FB5287'\r\n                    },\r\n                ],\r\n                global: [\r\n                    {\r\n                        icon: infected,\r\n                        title: 'Infected',\r\n                        value: data.global_total_cases,\r\n                        color: '#1CA0F2'\r\n                    },\r\n                    {\r\n                        icon: active,\r\n                        title: 'Active',\r\n                        value: (data.global_total_cases - data.global_deaths - data.global_recovered),\r\n                        color: '#FFAA21'\r\n                    },\r\n                    {\r\n                        icon: newcase,\r\n                        title: 'New Cases',\r\n                        value: data.global_new_cases,\r\n                        color: '#BB86FC'\r\n                    },\r\n                    {\r\n                        icon: death,\r\n                        title: 'Deaths',\r\n                        value: data.global_deaths,\r\n                        color: '#FB5287'\r\n                    },\r\n                    {\r\n                        icon: newdeath,\r\n                        title: 'New Deaths',\r\n                        value: data.global_new_deaths,\r\n                        color: '#F35D22'\r\n                    },\r\n                    {\r\n                        icon: cured,\r\n                        title: 'Recovered',\r\n                        value: data.global_recovered,\r\n                        color: '#1EBC64'\r\n                    }\r\n\r\n                ],\r\n                hospitalData: mapHospitalizedData(data.hospital_data),\r\n            })\r\n        });\r\n    }\r\n\r\n    function mapHospitalizedData(data) {\r\n        return data.map(x => {\r\n            return {\r\n                id: x.hospital.id,\r\n                nameE: x.hospital.name,\r\n                nameS: x.hospital.name_si,\r\n                nameT: x.hospital.name_ta,\r\n                treatmentLocal: x.treatment_local,\r\n                treatmentForeign: x.treatment_foreign,\r\n                treatmentTotal: x.treatment_total,\r\n            }\r\n        })\r\n    }\r\n\r\n    function getRelatedPage() {\r\n        switch (props.pageType) {\r\n            case PageType.Local:\r\n                return currentStatistics.local.map(x => (\r\n                    <Grid style={{padding:10}} key={x} item xs={6} sm={6} lg={4} xl={4} >\r\n                        <StatisticCard color={x.color} icon={toSnakeCase(x.icon)} title={x.title} value={x.value} />\r\n                    </Grid>\r\n                ))\r\n            case PageType.Global:\r\n                return currentStatistics.global.map(x => (\r\n                    <Grid style={{padding:10}} key={x} item xs={6} sm={6} lg={4} xl={4} >\r\n                        <StatisticCard color={x.color} icon={toSnakeCase(x.icon)} title={x.title} value={x.value} />\r\n                    </Grid>\r\n                ))\r\n            case PageType.HospitalDetails:\r\n                return currentStatistics.hospitalData.map(x => (\r\n                    <Grid style={{padding:10}} key={x} item xs={12} sm={12} lg={4} xl={4} >\r\n                        <HospitalizedCard item={x} />\r\n                    </Grid>\r\n                ))\r\n        }\r\n    }\r\n\r\n\r\n    console.log(currentStatistics);\r\n    return (\r\n        <Fragment>\r\n            <h6 className=\"text-left MuiTypography-colorTextSecondary\" style={{ marginLeft: 10 }}>{`Last Updated : ${moment(currentStatistics.lastUpdated).fromNow()}`}</h6>\r\n            <Grid className='text-center' style ={{padding:2}} container xs={12} sm={12} lg={12} xl={12} >\r\n                {\r\n                    getRelatedPage()\r\n                }\r\n            </Grid>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nCurrentStatistics.propTypes = {\r\n    pageType: PropTypes.any,\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { CurrentStatistics } from '../components'\r\n\r\nconst StatisticPage = props => {\r\n    return (\r\n        <div>\r\n            <CurrentStatistics pageType={props.pageType} />\r\n            <div>test</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nStatisticPage.propTypes = {\r\n    pageType: PropTypes.any,\r\n}\r\n\r\nexport default StatisticPage\r\n","import React, { Fragment } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport StatisticPage from './view/statisticPage';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const StatisticRoute = ({ match,pageType }) => (\r\n    <Fragment>\r\n        <Route exact path={`${match.path}`} render={(props) => <StatisticPage {...props} pageType={pageType} />} />\r\n    </Fragment>\r\n);\r\n\r\nStatisticRoute.propTypes = {\r\n    match: PropTypes.any\r\n};","import React from 'react';\r\nimport { Typography, Toolbar, AppBar } from '@material-ui/core';\r\n\r\nconst NavBar = props => {\r\n    return (\r\n        <div>\r\n            <AppBar position=\"fixed\" style={{backgroundColor:'#121212'}} >\r\n                <Toolbar>\r\n                    <Typography style={{textShadow:'2px 1px #686868' , textAlign:'left'}} align='left' variant=\"h6\"  color='inherit'>\r\n                        Corona Live Statistics\r\n                </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NavBar\r\n","import React, { Fragment } from 'react';\r\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\r\nimport { Public, Room, HomeWork } from '@material-ui/icons';\r\nimport { PageType } from '../../../core/enums/pageType';\r\n\r\nconst BottomNavBar = props => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"root\">\r\n                <BottomNavigation showLabels={true} style={{backgroundColor:'#121212'}} >\r\n                    <BottomNavigationAction label=\"Srilanka\" icon={<Room />} onClick={() => props.onChange(PageType.Local)} />\r\n                    <BottomNavigationAction label=\"Gloabal\" icon={<Public />} onClick={() => props.onChange(PageType.Global)} />\r\n                    <BottomNavigationAction label=\"Hospitalized\" icon={<HomeWork />} onClick={() => props.onChange(PageType.HospitalDetails)} />\r\n                </BottomNavigation>               \r\n            </div>\r\n            <div className='copyright text-center'>Developed By Atheek Azmy</div>\r\n           \r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default BottomNavBar\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from './components/navBar';\r\nimport BottomNavBar from './components/bottomNavBar';\r\n\r\nconst Layout = props => {\r\n    return (\r\n        <Fragment>\r\n            <AppBar className=\"app-bar\" />\r\n            {props.children}\r\n           <BottomNavBar className=\"bottom-navbar\" {...props}/>          \r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default Layout\r\n\r\n\r\nLayout.propTypes = {\r\n    children: PropTypes.node,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\n\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { StatisticRoute } from '../modules/statistics/routes';\r\nimport Layout from './layout/layout';\r\n\r\nexport const AppRoutes = props => {\r\n    const [pageType, setPageType] = useState(0);   \r\n\r\n    return (< BrowserRouter >\r\n        <Fragment>\r\n            <Layout onChange={setPageType.bind(this)}>\r\n                <div style={{left: 0, right: 0, marginTop:80 ,marginBottom:90 }}>\r\n                    <Route path='/' render={(props) => <StatisticRoute {...props} pageType={pageType} />} />\r\n                </div>\r\n            </Layout>\r\n        </Fragment>\r\n    </ BrowserRouter>\r\n    )\r\n}\r\n\r\nAppRoutes.propTypes = {\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport { AppRoutes } from './routes';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\n\r\nfunction App() {\r\n  const darkTheme = createMuiTheme({\r\n  \r\n    palette: {\r\n      type: 'dark',\r\n      primary: {\r\n        light: '#757ce8',\r\n        main: '#3f50b5',\r\n        dark: '#002884',\r\n        contrastText: '#fff',\r\n      },\r\n      secondary: {\r\n        light: '#ff7961',\r\n        main: '#f44336',\r\n        dark: '#ba000d',\r\n        contrastText: '#000',\r\n      }\r\n    }   \r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <div className=\"App\" >\r\n        <AppRoutes />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}